import 'package:flutter/material.dart';import 'package:flutter_svg/flutter_svg.dart';import 'package:get/get.dart';import 'package:go_on_get_it/constants/app_images.dart';import 'package:go_on_get_it/constants/font_constants.dart';import 'package:go_on_get_it/screens/favourite/favorite_controller.dart';import 'package:go_on_get_it/screens/location/controller/main_controller.dart';import 'package:go_on_get_it/screens/shopDetail/shop_detail_controller.dart';import 'package:go_on_get_it/utils/space.dart';import 'package:go_on_get_it/utils/utils.dart';import 'package:go_on_get_it/widgets/customer_appbar.dart';import 'package:go_on_get_it/widgets/dropdown/catalog_dropdown.dart';import 'package:go_on_get_it/widgets/favorite_individual_item_mobile.dart';import 'package:go_on_get_it/widgets/search_view.dart';import 'package:go_on_get_it/widgets/text_with_leaves.dart';import 'package:sizer/sizer.dart';import '/constants/routes.dart';import '/widgets/favorite_individual_item_tablet.dart';class ShopScreen extends StatefulWidget {  const ShopScreen({Key? key}) : super(key: key);  @override  State<ShopScreen> createState() => _ShopScreenState();}class _ShopScreenState extends State<ShopScreen> {  final MainController mainController = Get.find<MainController>();  final FavoriteController favoriteController = Get.put(FavoriteController());  final SubSubCategoryController shopDetailController =      Get.put(SubSubCategoryController());  String catalogTitle = Get.arguments?["catalogTitle"] ?? 'UnSelected';  final String id = Get.arguments["id"] ?? '';  String filterValue = '';  @override  void initState() {    super.initState();    handleCalls();  }  void handleCalls() async {    Future.delayed(        10.milliseconds,        () => {              mainController.seletedItem.value = catalogTitle,              if (catalogTitle == 'throughShops' ||                  catalogTitle == 'throughItem')                {mainController.showSearch(true)}              else                {mainController.showSearch(false)}            });    shopDetailController.getShops(        filter: Get.arguments['filter'], categoryId: id);  }  @override  Widget build(BuildContext context) {    var shortestSide = MediaQuery.of(context).size.shortestSide;    final bool _isMobileLayout = shortestSide < 600;    return Scaffold(      resizeToAvoidBottomInset: false,      appBar: CustomeAppBar(        title: 'Sjekk Tilbud',        onPressed: () {          if (mainController.catalogLay != null) {            mainController.catalogLay?.remove();            mainController.catalogLay = null;            mainController.isCatalogDropDown = false;          }        },      ),      body: GestureDetector(        onTap: () {          if (mainController.catalogLay != null) {            mainController.catalogLay?.remove();            mainController.catalogLay = null;            mainController.isCatalogDropDown = false;          }        },        child: Padding(          padding: EdgeInsets.symmetric(horizontal: 2.0.w),          child: Padding(            padding: EdgeInsets.only(top: _isMobileLayout ? 0 : 2.h),            child: Column(              children: [                Container(                  height: MediaQuery.of(context).size.height * 0.07,                  margin: EdgeInsets.only(                    top: 1.h,                    bottom: 1.h,                  ),                  child: Row(                    mainAxisAlignment: MainAxisAlignment.end,                    children: [                      Expanded(                        child: InkWell(                          onTap: () {                            Get.toNamed(Routes.locationScreen);                          },                          child: Padding(                            padding: EdgeInsets.only(left: 2.w),                            child: Column(                              mainAxisAlignment: MainAxisAlignment.center,                              crossAxisAlignment: CrossAxisAlignment.start,                              children: [                                Row(                                  mainAxisAlignment: MainAxisAlignment.start,                                  children: [                                    Flexible(                                      child: Text(                                        'currentLocation'.tr,                                        style: TextStyle(                                          fontSize:                                              _isMobileLayout ? 11.sp : 9.sp,                                        ),                                      ),                                    ),                                    Padding(                                      padding: EdgeInsets.all(0.8.h),                                      child: SvgPicture.asset(                                        AppImages.smallArrowIcon,                                        color: Colors.black,                                      ),                                    ),                                  ],                                ),                                Container(                                  margin: EdgeInsets.only(top: 0.5.h),                                  width: 48.w,                                  height: 3.h,                                  child: Text(                                    mainController.locationAddress.value,                                    style: TextStyle(                                      fontSize:                                          _isMobileLayout ? 14.5.sp : 10.sp,                                      color:                                          const Color.fromRGBO(64, 201, 121, 1),                                      fontFamily:                                          FontConstants.sourceSansProSemiBold,                                    ),                                  ),                                ),                              ],                            ),                          ),                        ),                      ),                      Row(                        children: [                          Obx(                            () => CatalogDropdown(                              customeWidth: 20.w,                              radiusText: mainController.seletedItem.value.tr,                              callBack: (catalog) {                                mainController.catalogLay = catalog;                              },                              selectedvalue: (value) {                                mainController.seletedItem.value = value;                                if (value == 'trending') {                                  mainController.showSearch(false);                                  shopDetailController.getShops(                                      filter: 'trending',                                      categoryId: id == '' ? '' : id);                                } else if (value == 'allNearMe') {                                  mainController.showSearch(false);                                  shopDetailController.getShops(                                      filter: 'near_me',                                      categoryId: id == '' ? '' : id);                                } else if (value == "throughShops") {                                  mainController.showSearch(true);                                  shopDetailController.getShops(                                      filter: 'shop', categoryId: '');                                } else if (value == "throughItem") {                                  mainController.showSearch(true);                                  shopDetailController.getShops(                                      filter: 'item', categoryId: '');                                } else {                                  mainController.showSearch(false);                                  catalogTitle = '';                                  Get.back();                                }                              },                              iconData: Icons.arrow_drop_down,                            ),                          ),                        ],                      ),                    ],                  ),                ),                Obx(                  () => !mainController.isThroughShops.value                      ? const SizedBox()                      : Column(                          children: [                            Spaces.y2,                            Card(                              elevation: 0,                              child: SearchView(                                onChange: (value) {                                  if (value.length > 1) {                                    shopDetailController.getSearchedShops(                                        filter:                                            mainController.seletedItem.value ==                                                    'throughItem'                                                ? 'item'                                                : 'shop',                                        searchedTitle: value.toString());                                    // shopDetailController.isSearching.value = true;                                  } else {                                    shopDetailController.isNoItems.value = true;                                    shopDetailController.shopList.clear();                                    shopDetailController.shopFilterList.clear();                                    shopDetailController.isSearching.value =                                        false;                                  }                                  // shopDetailController.getShopsFilter(value);                                },                                clearBtListener: () {                                  // shopDetailController.getShops(filter: 'item');                                  shopDetailController.shopList.clear();                                  shopDetailController.shopFilterList.clear();                                  shopDetailController.isSearching.value =                                      false;                                },                              ),                            ),                          ],                        ),                ),                Align(                  alignment: Alignment.centerLeft,                  child: Obx(                    () => TextWithLeaves(                      mainController.seletedItem.value.tr,                    ),                  ),                ),                Expanded(                  child: Container(                    padding:                        EdgeInsets.only(top: _isMobileLayout ? 0.8.h : 1.2.h),                    child: !_isMobileLayout                        ? Obx(                            () => shopDetailController.isLoading.value                                ? const Center(                                    child: CircularProgressIndicator.adaptive())                                : shopDetailController.isNoItems.value                                    ? Center(                                        child: Text(                                          mainController.seletedItem.value ==                                                  'throughShops'                                              ? 'Search Your Shops'                                              : mainController                                                          .seletedItem.value ==                                                      'throughItem'                                                  ? 'Search Your Items'                                                  : 'No Items Found in this Category',                                          style: TextStyle(                                              fontSize: _isMobileLayout                                                  ? 12.sp                                                  : 7.sp),                                        ),                                      )                                    : GridView.builder(                                        itemCount: shopDetailController                                                .shopFilterList.isNotEmpty                                            ? shopDetailController                                                .shopFilterList.length                                            : shopDetailController                                                .shopList.length,                                        gridDelegate:                                            SliverGridDelegateWithFixedCrossAxisCount(                                          childAspectRatio: 8 / 3.8,                                          mainAxisSpacing: 1.h,                                          crossAxisSpacing: 1.h,                                          crossAxisCount: 2,                                        ),                                        itemBuilder: (context, index) {                                          return GestureDetector(                                            onTap: () async {                                              ///hit addShopClick Api                                              final result = await Get.toNamed(                                                Routes                                                    .nextToCatalogIndividualScreen,                                                arguments: {                                                  'iconUrl': shopDetailController                                                          .shopFilterList                                                          .isNotEmpty                                                      ? '${Utils.BASE_URL}${shopDetailController.shopFilterList[index].shopLogo}'                                                      : '${Utils.BASE_URL}${shopDetailController.shopList[index].shopLogo}',                                                  'title': shopDetailController                                                          .shopFilterList                                                          .isNotEmpty                                                      ? shopDetailController                                                          .shopFilterList[index]                                                          .name                                                      : shopDetailController                                                          .shopList[index].name,                                                  'address':                                                      shopDetailController                                                              .shopFilterList                                                              .isNotEmpty                                                          ? shopDetailController                                                              .shopFilterList[                                                                  index]                                                              .address                                                          : shopDetailController                                                              .shopList[index]                                                              .address,                                                  'phone': shopDetailController                                                          .shopFilterList                                                          .isNotEmpty                                                      ? shopDetailController                                                          .shopFilterList[index]                                                          .phone                                                      : shopDetailController                                                          .shopList[index]                                                          .phone,                                                  'offers': shopDetailController                                                          .shopFilterList                                                          .isNotEmpty                                                      ? shopDetailController                                                          .shopFilterList[index]                                                          .offers                                                      : shopDetailController                                                          .shopList[index]                                                          .offers,                                                  'shop_id':                                                      shopDetailController                                                              .shopFilterList                                                              .isNotEmpty                                                          ? shopDetailController                                                              .shopFilterList[                                                                  index]                                                              .id                                                          : shopDetailController                                                              .shopList[index]                                                              .id,                                                  'isLiked': shopDetailController                                                          .shopFilterList                                                          .isNotEmpty                                                      ? shopDetailController                                                                  .shopFilterList[                                                                      index]                                                                  .isLiked ==                                                              1                                                          ? true.obs                                                          : false.obs                                                      : shopDetailController                                                                  .shopList[                                                                      index]                                                                  .isLiked ==                                                              1                                                          ? true.obs                                                          : false.obs,                                                  'location': {                                                    'lat': shopDetailController                                                        .shopList[index].lat                                                        .toString(),                                                    'long': shopDetailController                                                        .shopList[index].long                                                        .toString(),                                                    'distanceInKm':                                                        shopDetailController                                                            .shopList[index]                                                            .distanceKm                                                            .toString()                                                  }                                                },                                              );                                              String filterValue = '';                                              switch (mainController                                                  .seletedItem.value) {                                                case 'trending':                                                  filterValue = 'trending';                                                  break;                                                case 'allNearMe':                                                  filterValue = 'near_me';                                                  break;                                                case 'throughItem':                                                  filterValue = 'item';                                                  break;                                                case 'throughShops':                                                  filterValue = 'shop';                                                  break;                                                default:                                                  filterValue = 'catalog';                                                  break;                                              }                                              if (filterValue != 'item' &&                                                  filterValue != 'shop') {                                                shopDetailController.getShops(                                                    filter: filterValue,                                                    categoryId: id);                                              }                                            },                                            child:                                                FavoriteIndividualItemsForTab(                                                    title: shopDetailController                                                            .shopFilterList                                                            .isNotEmpty                                                        ? shopDetailController                                                            .shopFilterList[                                                                index]                                                            .name!                                                        : shopDetailController                                                            .shopList[index]                                                            .name!,                                                    iconUrl: shopDetailController                                                            .shopFilterList                                                            .isNotEmpty                                                        ? shopDetailController.shopFilterList[index].shopLogo                                                            .toString()                                                        : shopDetailController.shopList[index].shopLogo                                                            .toString(),                                                    address: shopDetailController                                                            .shopFilterList                                                            .isNotEmpty                                                        ? shopDetailController                                                            .shopFilterList[                                                                index]                                                            .address!                                                        : shopDetailController                                                            .shopList[index]                                                            .address!,                                                    contact: shopDetailController                                                            .shopFilterList                                                            .isNotEmpty                                                        ? shopDetailController                                                            .shopFilterList[index]                                                            .phone                                                            .toString()                                                        : shopDetailController.shopList[index].phone.toString(),                                                    distance: '${shopDetailController.shopFilterList.isNotEmpty ? shopDetailController.shopFilterList[index].distanceKm.toString() : shopDetailController.shopList[index].distanceKm.toString()} Km away',                                                    position: index,                                                    shopId: shopDetailController.shopFilterList.isNotEmpty ? shopDetailController.shopFilterList[index].id : shopDetailController.shopList[index].id,                                                    isLiked: shopDetailController.shopFilterList.isNotEmpty                                                        ? shopDetailController.shopFilterList[index].isLiked == 1                                                            ? true.obs                                                            : false.obs                                                        : shopDetailController.shopList[index].isLiked == 1                                                            ? true.obs                                                            : false.obs,                                                    filter: mainController.seletedItem.value,                                                    id: id,                                                    location: {                                                  'lat': shopDetailController                                                      .shopList[index].lat                                                      .toString(),                                                  'long': shopDetailController                                                      .shopList[index].long                                                      .toString(),                                                  'distanceInKm':                                                      shopDetailController                                                          .shopList[index]                                                          .distanceKm                                                          .toString()                                                }),                                          );                                        },                                      ),                          )                        : Obx(                            () => shopDetailController.isLoading.value                                ? Column(                                    children: [                                      Padding(                                        padding: EdgeInsets.only(top: 5.h),                                        child: const CircularProgressIndicator                                            .adaptive(),                                      ),                                      const SizedBox()                                    ],                                  )                                : shopDetailController.isNoItems.value                                    ? Center(                                        child: Text(                                          mainController.seletedItem.value ==                                                  'throughShops'                                              ? 'Search Your Shops'                                              : mainController                                                          .seletedItem.value ==                                                      'throughItem'                                                  ? 'Search Your Items'                                                  : 'No Items Found in this Category',                                          style: TextStyle(                                              fontSize: _isMobileLayout                                                  ? 12.sp                                                  : 8.sp),                                        ),                                      )                                    : ListView.builder(                                        itemCount: shopDetailController                                                .shopFilterList.isNotEmpty                                            ? shopDetailController                                                .shopFilterList.length                                            : shopDetailController                                                .shopList.length,                                        shrinkWrap: true,                                        itemBuilder: (context, index) {                                          return GestureDetector(                                              onTap: () async {                                                shopDetailController                                                    .getShopNearToExpire(                                                        id: shopDetailController                                                            .shopList[index].id                                                            .toString());                                                if (mainController.catalogLay !=                                                    null) {                                                  mainController.catalogLay                                                      ?.remove();                                                  mainController.catalogLay =                                                      null;                                                  mainController                                                          .isCatalogDropDown =                                                      false;                                                }                                                await Get.toNamed(                                                  Routes                                                      .nextToCatalogIndividualScreen,                                                  arguments: {                                                    'id': id,                                                    'iconUrl': shopDetailController                                                            .shopFilterList                                                            .isNotEmpty                                                        ? '${Utils.BASE_URL}${shopDetailController.shopFilterList[index].shopLogo}'                                                        : '${Utils.BASE_URL}${shopDetailController.shopList[index].shopLogo}',                                                    'title': shopDetailController                                                            .shopFilterList                                                            .isNotEmpty                                                        ? shopDetailController                                                            .shopFilterList[                                                                index]                                                            .name                                                        : shopDetailController                                                            .shopList[index]                                                            .name,                                                    'address': shopDetailController                                                            .shopFilterList                                                            .isNotEmpty                                                        ? shopDetailController                                                            .shopFilterList[                                                                index]                                                            .address                                                        : shopDetailController                                                            .shopList[index]                                                            .address,                                                    'phone': shopDetailController                                                            .shopFilterList                                                            .isNotEmpty                                                        ? shopDetailController                                                            .shopFilterList[                                                                index]                                                            .phone                                                        : shopDetailController                                                            .shopList[index]                                                            .phone,                                                    'offers': shopDetailController                                                            .shopFilterList                                                            .isNotEmpty                                                        ? shopDetailController                                                            .shopFilterList[                                                                index]                                                            .offers                                                        : shopDetailController                                                            .shopList[index]                                                            .offers,                                                    'shop_id': shopDetailController                                                            .shopFilterList                                                            .isNotEmpty                                                        ? shopDetailController                                                            .shopFilterList[                                                                index]                                                            .id                                                        : shopDetailController                                                            .shopList[index].id,                                                    'isLiked': shopDetailController                                                            .shopFilterList                                                            .isNotEmpty                                                        ? shopDetailController                                                                    .shopFilterList[                                                                        index]                                                                    .isLiked ==                                                                1                                                            ? true.obs                                                            : false.obs                                                        : shopDetailController                                                                    .shopList[                                                                        index]                                                                    .isLiked ==                                                                1                                                            ? true.obs                                                            : false.obs,                                                    'location': {                                                      'lat':                                                          shopDetailController                                                              .shopList[index]                                                              .lat                                                              .toString(),                                                      'long':                                                          shopDetailController                                                              .shopList[index]                                                              .long                                                              .toString(),                                                      'distanceInKm':                                                          shopDetailController                                                              .shopList[index]                                                              .distanceKm                                                              .toString()                                                    }                                                  },                                                );                                                switch (mainController                                                    .seletedItem.value) {                                                  case 'trending':                                                    filterValue = 'trending';                                                    break;                                                  case 'allNearMe':                                                    filterValue = 'near_me';                                                    break;                                                  case 'throughItem':                                                    filterValue = 'item';                                                    break;                                                  case 'throughShops':                                                    filterValue = 'shop';                                                    break;                                                  default:                                                    filterValue = 'catalog';                                                    break;                                                }                                                if (filterValue != 'item' &&                                                    filterValue != 'shop') {                                                  shopDetailController.getShops(                                                      filter: filterValue,                                                      categoryId: id);                                                }                                              },                                              child:                                                  FavoriteIndividualItemForMobile(                                                      title: shopDetailController                                                              .shopFilterList                                                              .isNotEmpty                                                          ? shopDetailController                                                              .shopFilterList[                                                                  index]                                                              .name!                                                          : shopDetailController                                                              .shopList[index]                                                              .name!,                                                      iconUrl: shopDetailController                                                              .shopFilterList                                                              .isNotEmpty                                                          ? shopDetailController.shopFilterList[index].shopLogo                                                              .toString()                                                          : shopDetailController                                                              .shopList[index]                                                              .shopLogo                                                              .toString(),                                                      address: shopDetailController                                                              .shopFilterList                                                              .isNotEmpty                                                          ? shopDetailController                                                              .shopFilterList[                                                                  index]                                                              .address!                                                          : shopDetailController                                                              .shopList[index]                                                              .address!,                                                      contact: shopDetailController                                                              .shopFilterList                                                              .isNotEmpty                                                          ? shopDetailController.shopFilterList[index].phone                                                              .toString()                                                          : shopDetailController.shopList[index].phone.toString(),                                                      distance: '${shopDetailController.shopFilterList.isNotEmpty ? shopDetailController.shopFilterList[index].distanceKm.toString() : shopDetailController.shopList[index].distanceKm.toString()} Km away',                                                      position: index,                                                      shopId: shopDetailController.shopFilterList.isNotEmpty ? shopDetailController.shopFilterList[index].id : shopDetailController.shopList[index].id,                                                      isLiked: shopDetailController.shopFilterList.isNotEmpty                                                          ? shopDetailController.shopFilterList[index].isLiked == 1                                                              ? true.obs                                                              : false.obs                                                          : shopDetailController.shopList[index].isLiked == 1                                                              ? true.obs                                                              : false.obs,                                                      filter: mainController.seletedItem.value,                                                      id: id,                                                      location: {                                                    'lat': shopDetailController                                                        .shopList[index].lat                                                        .toString(),                                                    'long': shopDetailController                                                        .shopList[index].long                                                        .toString(),                                                    'distanceInKm':                                                        shopDetailController                                                            .shopList[index]                                                            .distanceKm                                                            .toString()                                                  }));                                        },                                      ),                          ),                  ),                ),              ],            ),          ),        ),      ),    );  }}